class Solution(object):
    def islandPerimeter(self, grid):
        n,m = len(grid),len(grid[0])
        dire = [[0,1],[1,0],[-1,0],[0,-1]]
        visited = set()
        res = [0]

        def isValid(r,c):
            return (0 <= r < n) and (0 <=c < m)
            
        def dfs(r,c):
            visited.add((r,c))
            for i,j in dire:
                new_row,new_col = r+i,c+j

                if not isValid(new_row,new_col) or grid[new_row][new_col]==0:
                    res[0]+=1
                if isValid(new_row,new_col) and (new_row,new_col) not in visited and grid[new_row][new_col]:
                    dfs(new_row,new_col) 
            return res[0]
            
            
        for i in range(n):
            for j in range(m):
                if grid[i][j]:
                    return dfs(i,j)
        return res
         
            

