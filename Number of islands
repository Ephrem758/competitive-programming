class Solution(object):
    def numIslands(self, grid):
        n,m = len(grid),len(grid[0])
        dire = [[0,1],[1,0],[-1,0],[0,-1]]
        visited = set()
 
        def isValid(r,c):
            return (0 <= r < n) and (0 <=c < m)

        def dfs(r,c):

            visited.add((r,c))    
            for i,j in dire:
                new_row,new_col = r+i,c+j
                if isValid(new_row,new_col) and (new_row,new_col) not in visited and grid[new_row][new_col]=='1':
                    dfs(new_row,new_col)


        res = 0
        for i in range(n):
            for j in range(m):
                if grid[i][j]=='1' and (i,j) not in visited:
                    dfs(i,j)
                    res+=1
        return res


        """
        :type grid: List[List[str]]
        :rtype: int
        """