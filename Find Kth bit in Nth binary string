class Solution:
    def findKthBit(self, n: int, k: int) -> str:

        if n==1:
            return "0"
        if k>(2**n)//2:
            return str(1- int(self.findKthBit(n-1,((2**n)-int(k)))))
        elif k < (2**n)//2:
            return str(self.findKthBit(n-1,k))
        else:
            return "1"


        
        # Brute force
        # def helper(n):
        #     if n==1:    
        #         return "0"
        #     return helper(n-1)+ "1" + inverse(helper(n-1))[::-1]
        
        # def inverse(s):
        #     s = list(s)
        #     for i in range(len(s)):
        #         if s[i] == '0':
        #             s[i] = '1'
                    
        #         else:
        #             s[i]= '0'
        #     return "".join(s)
        # result=helper(n)
        # return result[k-1]
