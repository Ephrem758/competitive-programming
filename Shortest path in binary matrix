class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        n = len(grid)
        direction = [[1,0], [0,1], [-1,0], [0,-1], [1,1], [-1,-1], [1,-1], [-1,1]]
        
        visited = set()

        if grid[0][0] or grid[n-1][n-1]:
            return -1
        if n==1 and not grid[0][0]:
            return 1
        
        def inbound(r,c):
            return 0<=r<n and 0<=c<n


        queue = deque([[0,0,1]])
        print(queue)

        while queue:
            cell = queue.popleft()

            for i,j in direction:
                new_row,new_col = cell[0]+i,cell[1]+j
            
                if (new_row,new_col)==(n-1,n-1) and not grid[new_row][new_col]:
                    return cell[2]+1
                if inbound(new_row,new_col) and (new_row,new_col) not in visited and grid[new_row][new_col]==0:
                    queue.append((new_row,new_col,cell[2]+1))
                    visited.add((new_row,new_col))

        return -1
            